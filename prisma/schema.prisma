// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ***** ENUM ***** //
enum Gender {
  MALE
  FEMALE
}

enum Role {
  PATIENT
  DOCTOR
}

enum TypeConversation {
  SINGLE
  GROUP
}

enum TypeMessage {
  TEXT
  IMAGE
  VIDEO
  FILE
  RECALL
  NOTIFY
}

enum TypeNotification {
  WARNING
  SYSTEM
  APPOINTMENT
}

enum Status {
  SAFE
  DANGER
  CRITIAL
}

// ***** MODEL ***** //

model User {
  id       String  @id @default(cuid()) @db.VarChar(32)
  phone    String? @db.VarChar(255)
  password String? @db.VarChar(255)
  token    String? @db.VarChar(255)
  role     Role?   @default(DOCTOR)
  memberId String? @unique @db.VarChar(32)
  //status   Status? @default(ACTIVE)

  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false) @db.TinyInt()

  patientId String? @unique @db.VarChar(32)
  doctorId  String? @unique @db.VarChar(32)

  doctor       Doctor?        @relation("user_doctor", fields: [doctorId], references: [id], onDelete: Cascade)
  patient      Patient?       @relation("user_patient", fields: [patientId], references: [id], onDelete: Cascade)
  convesations Conversation[] @relation("user_conversation")
  notification Notification[] @relation("user_notification")
}

model Doctor {
  id          String    @id @default(cuid()) @db.VarChar(32)
  fullName    String    @db.VarChar(255)
  gender      Gender?
  dateOfBirth DateTime?
  address     String?   @db.Text()
  phone       String?   @db.VarChar(255)
  email       String?   @db.VarChar(255)
  avatar      String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  experience  String?   @db.VarChar(255)
  workPlace   String?   @db.VarChar(255)
  specialize  String?   @db.VarChar(255)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  user    User?     @relation("user_doctor")
  patient Patient[] @relation("doctor_patient")
}

model Patient {
  id              String    @id @default(cuid()) @db.VarChar(32)
  fullName        String    @db.VarChar(255)
  gender          Gender?
  dateOfBirth     DateTime?
  phone           String?   @db.VarChar(255)
  address         String?   @db.Text()
  avatar          String?   @db.VarChar(255)
  job             String?   @db.VarChar(255)
  insuranceNumber String?   @db.VarChar(255)
  state           String?   @db.VarChar(255)
  medicalHistory  String?   @db.VarChar(255)

  doctorId String? @unique @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  user       User?         @relation("user_patient")
  doctor     Doctor?       @relation("doctor_patient", fields: [doctorId], references: [id], onDelete: Cascade)
  healRecord HealthRecord? @relation("health_record_patient")
}

model Conversation {
  id               String            @id @default(cuid()) @db.VarChar(32)
  avatar           String?           @db.Text
  typeConversation TypeConversation? @default(SINGLE)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  message Message[] @relation("conversation_message")
  member  User[]    @relation("user_conversation")
}

model Message {
  id          String       @id @default(cuid()) @db.VarChar(32)
  typeMessage TypeMessage?
  content     String?      @db.VarChar(255)

  conversationId String? @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  conversation Conversation? @relation("conversation_message", fields: [conversationId], references: [id], onDelete: Cascade)
}

model Notification {
  id               String            @id @default(cuid()) @db.VarChar(32)
  title            String?           @db.VarChar(255)
  typeNotification TypeNotification? @default(SYSTEM)
  content          String?           @db.VarChar(255)
  isRead           Boolean?          @default(false) @db.TinyInt()

  userId String? @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  user User? @relation("user_notification", fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationApointment {
  id              String    @id @default(cuid()) @db.VarChar(32)
  appointmentNote String    @db.VarChar(255)
  time            DateTime?

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)
}

model Appointment {
  id String @id @default(cuid()) @db.VarChar(32)
}

model HealthRecord {
  id                 String  @id @default(cuid()) @db.VarChar(32)
  generalInformation String? @db.VarChar(255)
  content            String? @db.VarChar(255)
  status             Status? @default(SAFE)

  patientId String? @unique @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  patient       Patient?        @relation("health_record_patient", fields: [patientId], references: [id], onDelete: Cascade)
  bmi           Bmi?            @relation("health_record_bmi")
  bloodPressure BloodPressure[] @relation("health_record_blood_pressure")
  heartbeat     Heartbeat[]     @relation("health_record_heartbeat")
  glucose       Glucose[]       @relation("health_record_glucose")
  cholesterol   Cholesterol[]   @relation("health_record_cholesterol")
}

model Bmi {
  id       String  @id @default(cuid()) @db.VarChar(32)
  height   String? @db.VarChar(255)
  weight   String? @db.VarChar(255)
  indexBmi String? @db.VarChar(32)

  healthRecordId String? @unique @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  healthRecord HealthRecord? @relation("health_record_bmi", fields: [healthRecordId], references: [id], onDelete: Cascade)
}

model BloodPressure {
  id        String @id @default(cuid()) @db.VarChar(32)
  systolic  String @db.VarChar(255)
  diastolic String @db.VarChar(255)

  healthRecordId String? @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  healthRecord HealthRecord? @relation("health_record_blood_pressure", fields: [healthRecordId], references: [id], onDelete: Cascade)
}

model Heartbeat {
  id                 String @id @default(cuid()) @db.VarChar(32)
  heartRateIndicator String @db.VarChar(255)

  healthRecordId String? @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  healthRecord HealthRecord? @relation("health_record_heartbeat", fields: [healthRecordId], references: [id], onDelete: Cascade)
}

model Cholesterol {
  id          String @id @default(cuid()) @db.VarChar(32)
  cholesterol String @db.VarChar(255)

  healthRecordId String? @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  healthRecord HealthRecord? @relation("health_record_cholesterol", fields: [healthRecordId], references: [id], onDelete: Cascade)
}

model Glucose {
  id      String @id @default(cuid()) @db.VarChar(32)
  glucose String @db.VarChar(255)

  healthRecordId String? @db.VarChar(32)

  createdAt DateTime @default(now())
  createdBy String?  @db.VarChar(32)
  updatedAt DateTime @updatedAt
  updatedBy String?  @db.VarChar(32)
  isDeleted Boolean  @default(false) @db.TinyInt()
  deletedBy String?  @db.VarChar(32)

  healthRecord HealthRecord? @relation("health_record_glucose", fields: [healthRecordId], references: [id], onDelete: Cascade)
}
